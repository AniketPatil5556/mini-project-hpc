// File: huffman_cuda.cu
#include <iostream>
#include <queue>
#include <unordered_map>
#include <vector>
#include <cuda_runtime.h>

#define CHAR_RANGE 256

// ======================= Node Structure ========================
struct Node {
    char ch;
    int freq;
    Node *left, *right;

    Node(char ch, int freq, Node* left = nullptr, Node* right = nullptr) 
        : ch(ch), freq(freq), left(left), right(right) {}
};

// Compare struct for priority queue
struct Compare {
    bool operator()(Node* l, Node* r) {
        return l->freq > r->freq;
    }
};

// ======================= Build Huffman Tree =====================
Node* buildHuffmanTree(int freq[]) {
    std::priority_queue<Node*, std::vector<Node*>, Compare> pq;

    for (int i = 0; i < CHAR_RANGE; ++i) {
        if (freq[i]) pq.push(new Node((char)i, freq[i]));
    }

    while (pq.size() > 1) {
        Node *left = pq.top(); pq.pop();
        Node *right = pq.top(); pq.pop();
        pq.push(new Node('\0', left->freq + right->freq, left, right));
    }

    return pq.top();
}

// ======================= Generate Huffman Codes =================
void generateCodes(Node* root, std::string code, std::unordered_map<char, std::string>& huffmanCodes) {
    if (!root) return;
    if (!root->left && !root->right) huffmanCodes[root->ch] = code;
    generateCodes(root->left, code + "0", huffmanCodes);
    generateCodes(root->right, code + "1", huffmanCodes);
}

// ======================= GPU Kernel for Frequency Count =========
__global__ void countFrequencies(char* input, int* freq, int size) {
    int i = threadIdx.x + blockIdx.x * blockDim.x;
    if (i < size) {
        atomicAdd(&freq[(unsigned char)input[i]], 1);
    }
}

// ======================= Main Host Code =========================
int main() {
    std::string text = "this is an example for huffman encoding";

    int n = text.size();
    char* d_input;
    int* d_freq;

    // Allocate memory on device
    cudaMalloc((void**)&d_input, n * sizeof(char));
    cudaMalloc((void**)&d_freq, CHAR_RANGE * sizeof(int));
    cudaMemset(d_freq, 0, CHAR_RANGE * sizeof(int));

    // Copy input to device
    cudaMemcpy(d_input, text.c_str(), n * sizeof(char), cudaMemcpyHostToDevice);

    // Kernel launch to count frequencies
    countFrequencies<<<(n + 255) / 256, 256>>>(d_input, d_freq, n);

    // Copy result back
    int freq[CHAR_RANGE] = {0};
    cudaMemcpy(freq, d_freq, CHAR_RANGE * sizeof(int), cudaMemcpyDeviceToHost);

    // Build Huffman Tree and generate codes (on CPU)
    Node* root = buildHuffmanTree(freq);
    std::unordered_map<char, std::string> huffmanCodes;
    generateCodes(root, "", huffmanCodes);

    std::cout << "Huffman Codes:\n";
    for (auto& p : huffmanCodes) {
        std::cout << p.first << ": " << p.second << "\n";
    }

    // Encode input
    std::string encoded;
    for (char ch : text) {
        encoded += huffmanCodes[ch];
    }

    std::cout << "\nEncoded Text:\n" << encoded << std::endl;

    // Cleanup
    cudaFree(d_input);
    cudaFree(d_freq);

    return 0;
}
